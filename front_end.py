#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 11, 2018 09:31:51 AM

# import the Tkinker module to render guis and dialog boxes

from Tkinter import *

import front_end_support

# create a simple log file to track the execution of the code
# this will output to the directory where the executable is ran from

sys.stdout = open('Log_SAML_Config.txt', 'w')

py3 = False


def vp_start_gui():
    """Starting point when module is the main routine."""
    global val, w, root
    root = Tk()
    root.state("zoomed")
    top = New_Toplevel(root)
    front_end_support.init(root, top)
    root.mainloop()


w = None


def create_New_Toplevel(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = New_Toplevel(w)
    front_end_support.init(w, top, *args, **kwargs)
    return w, top


def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:

    # Stage Browse will generate a directory dialog box where the user will select the Stage directory of the target application
    # The directory should contain the files generated from the SAML/Config/open page (SPMetadata files)
    def stage_browse(self):
        import Tkinter
        import tkFileDialog
        root = Tkinter.Tk()
        root.withdraw()

        folder = tkFileDialog.askdirectory(parent=root, initialdir="/",
                                           title='Please select the MicroStrategy Stage directory')
        self.Stage_input.delete(0, END)
        self.Stage_input.insert(END, folder)

    # IDP Browse will generate a file dialog box where the user will select the file to become the IDPMetadata.xml
    # The file should be in the .xml file type and is generated from the IDP

    def idp_browse(self):
        import Tkinter
        import tkFileDialog
        root = Tkinter.Tk()
        root.withdraw()

        folder = tkFileDialog.askopenfilename(parent=root, initialdir="/",
                                              title='Please select the SAML Configured web.xml file')
        self.IDP_input.delete(0, END)
        self.IDP_input.insert(END, folder)

    # Cancel will give the user the ability to close the Gui/ application
    def cancel(self):

        import tkMessageBox
        msg = tkMessageBox.askyesno("MicroStrategy SAML Config", "Are you sure you want to cancel config window?")
        if msg:
            global root
            root.quit()

    # The Configpage will open a browser to the SAML/Config/open page to generate the the SPMetadata files
    # the URL by default will be "http://" + FQDN + ":8080/MicroStrategy/saml/config/open"
    def Configpage(self):
        import socket
        import webbrowser
        import tkSimpleDialog
        FQDN = socket.getfqdn()
        Config_url = "http://" + FQDN + ":8080/MicroStrategy/saml/config/open"
        try:
            config_site = tkSimpleDialog.askstring('MicroStrategy SAML Config', 'What is the SAML/Config/Open Address?',
                                                   initialvalue=Config_url)

            webbrowser.open_new(config_site)

        except TypeError:
            return

    # Start Config will execute the main scirpt where the configuration occurs(stop/start tomcat, file handling)

    def start_config(self):

        from pathlib import Path
        import tkMessageBox
        import os
        from microstrategy_saml import microstrategy_saml_func

        print('pressed start button\n')
        msg = tkMessageBox.askyesno("MicroStrategy SAML Config", "Are you sure you want to continue?")

        if msg:

            IDP = self.IDP_input.get()
            print('got the idp information\n')
            my_file = Path(IDP)

            # verify the user selected IDP file exists
            if my_file.is_file():
                pass
            else:
                tkMessageBox.showwarning("MicroStrategy SAML Config",
                                         "IDPMetadata.xml file does not exist, \n please review and update")
                return
            # verify the user selected IDP file is a .xml type
            if IDP.lower().endswith('.xml'):
                pass
            else:

                tkMessageBox.showwarning("MicroStrategy SAML Config",
                                         "wrong file type for IDPMetadata,  \n please review and update")
                return

            stage = self.Stage_input.get()

            # verify the user selected stage directory exists
            if os.path.isdir(stage):
                # verify the user selected stage directory follows the correct MicroStrategy path
                if os.path.basename(stage) == 'stage':
                    print('got the stage folder information\n')
                    pass
                else:
                    tkMessageBox.showwarning("MicroStrategy SAML Config",
                                             "stage Folder does not match the end of the path specified, \n please review and update")
                    return
            else:
                tkMessageBox.showwarning("MicroStrategy SAML Config",
                                         "STAGE Folder does not exist, \n please review and update")
                return
            # verify the user selected stage directory contains files
            if not os.listdir(stage):
                tkMessageBox.showwarning("MicroStrategy SAML Config",
                                         "No files in the Stage directory, \n please run config open page to generate configuration files")
                return

            # microstrategy_saml_func will:
            # Start/stop tomcat
            # Perform all the file movements from the MicroStrategy Web/Mobile Stage Directory to the SAML Directory
            # Create a backup of the current Web.xml file and rename as Web_original.xml
            # Edit the Web.xml file:
            # - Remove the security constraints
            # - Remove the original SAML support lines
            # - Append the WebXMLChanges.txt content to configure for SAML Authentication
            # 	Move the IDPMetadata.xml File to the SAML Directory
            microstrategy_saml_func(stage, IDP)

            tkMessageBox.showinfo("MicroStrategy SAML Config", "Configuration Successful, closing now")
            print('successfully ending last function\n')
            global root
            root.quit()

        else:
            tkMessageBox.showinfo("MicroStrategy SAML Config", "Please Review and Execute/Cancel")

    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""

        top.geometry("979x736+3731+-259")
        top.title("New Toplevel")
        top.configure(background="#ffffff")
        top.configure(highlightbackground="#ffffff")
        top.configure(highlightcolor="black")

        self.Title = Label(top)
        self.Title.place(relx=0.2, rely=0.05, height=80, width=700)
        self.Title.configure(activebackground="#f9f9f9")
        self.Title.configure(activeforeground="black")
        #  self.Title.configure(anchor="w")
        self.Title.configure(background="#ffffff")
        self.Title.configure(disabledforeground="#a3a3a3")
        self.Title.configure(foreground="#000000")
        self.Title.configure(highlightbackground="#ffffff")
        self.Title.configure(highlightcolor="black")
        self.Title.configure(text='''MicroStrategy Configuration with SAML GUI Tool''')
        self.Title.configure(font="Arial 24")

        self.StageLbl = Label(top)
        self.StageLbl.place(relx=0.02, rely=0.2, height=31, width=256)
        self.StageLbl.configure(activebackground="#f9f9f9")
        self.StageLbl.configure(activeforeground="black")
        self.StageLbl.configure(anchor="w")
        self.StageLbl.configure(background="#ffffff")
        self.StageLbl.configure(disabledforeground="#a3a3a3")
        self.StageLbl.configure(foreground="#000000")
        self.StageLbl.configure(highlightbackground="#ffffff")
        self.StageLbl.configure(highlightcolor="black")
        self.StageLbl.configure(text='''Path to MicroStrategy Stage Directory:''')

        self.IDPLbl = Label(top)
        self.IDPLbl.place(relx=0.02, rely=0.4, height=31, width=256)
        self.IDPLbl.configure(activebackground="#f9f9f9")
        self.IDPLbl.configure(activeforeground="black")
        self.IDPLbl.configure(anchor="w")
        self.IDPLbl.configure(background="#ffffff")
        self.IDPLbl.configure(disabledforeground="#a3a3a3")
        self.IDPLbl.configure(foreground="#000000")
        self.IDPLbl.configure(highlightbackground="#ffffff")
        self.IDPLbl.configure(highlightcolor="black")
        self.IDPLbl.configure(text='''Path to File to Become IDPMetadta.xml:''')

        self.Stage_input = Entry(top)
        self.Stage_input.place(relx=0.35, rely=0.2, height=31, relwidth=0.6)
        self.Stage_input.configure(background="white")
        self.Stage_input.configure(disabledforeground="#a3a3a3")
        self.Stage_input.configure(font="TkFixedFont")
        self.Stage_input.configure(foreground="#000000")
        self.Stage_input.configure(highlightbackground="#ffffff")
        self.Stage_input.configure(highlightcolor="black")
        self.Stage_input.configure(insertbackground="black")
        self.Stage_input.configure(selectbackground="#c4c4c4")
        self.Stage_input.configure(selectforeground="black")
        self.Stage_input.insert(END,
                                'C:/Program Files (x86)/Common Files/MicroStrategy/Tomcat/apache-tomcat-8.0.30/webapps/MicroStrategy/WEB-INF/classes/resources/SAML/stage')

        self.IDP_input = Entry(top)
        self.IDP_input.place(relx=0.35, rely=0.4, height=31, relwidth=0.6)
        self.IDP_input.configure(background="white")
        self.IDP_input.configure(disabledforeground="#a3a3a3")
        self.IDP_input.configure(font="TkFixedFont")
        self.IDP_input.configure(foreground="#000000")
        self.IDP_input.configure(highlightbackground="#ffffff")
        self.IDP_input.configure(highlightcolor="black")
        self.IDP_input.configure(insertbackground="black")
        self.IDP_input.configure(selectbackground="#c4c4c4")
        self.IDP_input.configure(selectforeground="black")

        self.IDP_input_browse = Button(top)
        self.IDP_input_browse.place(relx=0.2, rely=0.4, height=35, width=100)
        self.IDP_input_browse.configure(activebackground="#ffffff")
        self.IDP_input_browse.configure(activeforeground="#000000")
        self.IDP_input_browse.configure(background="#ffffff")
        self.IDP_input_browse.configure(disabledforeground="#a3a3a3")
        self.IDP_input_browse.configure(foreground="#000000")
        self.IDP_input_browse.configure(highlightbackground="#ffffff")
        self.IDP_input_browse.configure(highlightcolor="black")
        self.IDP_input_browse.configure(pady="0")
        self.IDP_input_browse.configure(text='''Browse''')

        self.IDP_input_browse.configure(command=self.idp_browse)

        # self.WEB_input_browse = Button(top)
        # self.WEB_input_browse.place(relx=0.2, rely=0.3, height=35, width=100)
        # self.WEB_input_browse.configure(activebackground="#ffffff")
        # self.WEB_input_browse.configure(activeforeground="#000000")
        # self.WEB_input_browse.configure(background="#ffffff")
        # self.WEB_input_browse.configure(disabledforeground="#a3a3a3")
        # self.WEB_input_browse.configure(foreground="#000000")
        # self.WEB_input_browse.configure(highlightbackground="#ffffff")
        # self.WEB_input_browse.configure(highlightcolor="black")
        # self.WEB_input_browse.configure(pady="0")
        # self.WEB_input_browse.configure(text='''Browse''')
        #
        # self.WEB_input_browse.configure(command=self.web_browse)

        self.stage_input_browse = Button(top)
        self.stage_input_browse.place(relx=0.2, rely=0.2, height=35, width=100)
        self.stage_input_browse.configure(activebackground="#ffffff")
        self.stage_input_browse.configure(activeforeground="#000000")
        self.stage_input_browse.configure(background="#ffffff")
        self.stage_input_browse.configure(disabledforeground="#a3a3a3")
        self.stage_input_browse.configure(foreground="#000000")
        self.stage_input_browse.configure(highlightbackground="#ffffff")
        self.stage_input_browse.configure(highlightcolor="black")
        self.stage_input_browse.configure(pady="0")
        self.stage_input_browse.configure(text='''Browse''')

        self.stage_input_browse.configure(command=self.stage_browse)

        self.Prerequ_Title = Label(top)
        self.Prerequ_Title.place(relx=0.27, rely=0.45, height=140, width=900)
        self.Prerequ_Title.configure(activebackground="#f9f9f9")
        self.Prerequ_Title.configure(activeforeground="black")
        self.Prerequ_Title.configure(anchor="w")
        self.Prerequ_Title.configure(background="#ffffff")
        self.Prerequ_Title.configure(disabledforeground="#a3a3a3")
        self.Prerequ_Title.configure(foreground="#000000")
        self.Prerequ_Title.configure(highlightbackground="#ffffff")
        self.Prerequ_Title.configure(highlightcolor="black")
        self.Prerequ_Title.configure(
            text='''Prerequisites Prior to Using:\n1. This will only work MSTR Web and Mobile on Tomcat\n2. The file to become the IDPMetadata.xml should be created (it will be renamed if incorrect)''')
        self.Prerequ_Title.configure(fg="Red")
        self.Prerequ_Title.configure(font="Arial 14")

        self.Instruct_Title = Label(top)
        self.Instruct_Title.place(relx=0.24, rely=0.65, height=150, width=950)
        self.Instruct_Title.configure(activebackground="#f9f9f9")
        self.Instruct_Title.configure(activeforeground="black")
        self.Instruct_Title.configure(anchor="w")
        self.Instruct_Title.configure(background="#ffffff")
        self.Instruct_Title.configure(disabledforeground="#a3a3a3")
        self.Instruct_Title.configure(foreground="#000000")
        self.Instruct_Title.configure(highlightbackground="#ffffff")
        self.Instruct_Title.configure(highlightcolor="black")
        self.Instruct_Title.configure(
            text='''Instructions:\n1. If the saml/config/open files have not been made use the option to create them\n2. Provide the fully qualified paths or use browse\n3. Press Execute\n4. A backup of the OOTB web.xml will be created as web_orignial.xml''')
        self.Instruct_Title.configure(font="Arial 14")

        self.ExecuteBtn = Button(top)
        self.ExecuteBtn.place(relx=0.2, rely=0.85, height=35, width=100)
        self.ExecuteBtn.configure(activebackground="#ffffff")
        self.ExecuteBtn.configure(activeforeground="#000000")
        self.ExecuteBtn.configure(background="#ffffff")
        self.ExecuteBtn.configure(disabledforeground="#a3a3a3")
        self.ExecuteBtn.configure(foreground="#000000")
        self.ExecuteBtn.configure(highlightbackground="#ffffff")
        self.ExecuteBtn.configure(highlightcolor="black")
        self.ExecuteBtn.configure(pady="0")
        self.ExecuteBtn.configure(text='''Execute''')

        self.ExecuteBtn.configure(command=self.start_config)

        self.CancelBtn = Button(top)
        self.CancelBtn.place(relx=0.7, rely=0.85, height=35, width=100)
        self.CancelBtn.configure(activebackground="#ffffff")
        self.CancelBtn.configure(activeforeground="#000000")
        self.CancelBtn.configure(background="#ffffff")
        self.CancelBtn.configure(disabledforeground="#a3a3a3")
        self.CancelBtn.configure(foreground="#000000")
        self.CancelBtn.configure(highlightbackground="#ffffff")
        self.CancelBtn.configure(highlightcolor="black")
        self.CancelBtn.configure(pady="0")
        self.CancelBtn.configure(text='''Cancel program''')

        self.CancelBtn.configure(command=self.cancel)

        self.ConfigBtn = Button(top)
        self.ConfigBtn.place(relx=0.4, rely=0.85, height=35, width=250)
        self.ConfigBtn.configure(activebackground="#ffffff")
        self.ConfigBtn.configure(activeforeground="#000000")
        self.ConfigBtn.configure(background="#ffffff")
        self.ConfigBtn.configure(disabledforeground="#a3a3a3")
        self.ConfigBtn.configure(foreground="#000000")
        self.ConfigBtn.configure(highlightbackground="#ffffff")
        self.ConfigBtn.configure(highlightcolor="black")
        self.ConfigBtn.configure(pady="0")
        self.ConfigBtn.configure(text='''Go to Config Open Page to Generate files''')

        self.ConfigBtn.configure(command=self.Configpage)

        self.info = Label(top)
        self.info.place(relx=0.4, rely=0.9, height=100, width=350)
        self.info.configure(activebackground="#f9f9f9")
        self.info.configure(activeforeground="black")
        self.info.configure(anchor="w")
        self.info.configure(background="#ffffff")
        self.info.configure(disabledforeground="#a3a3a3")
        self.info.configure(foreground="#000000")
        self.info.configure(highlightbackground="#ffffff")
        self.info.configure(highlightcolor="black")
        self.info.configure(
            text='''For any questions or enhancements please contact:\nBradford Jones\nbjones@microstrategy.com ''')
        self.Instruct_Title.configure(font="Arial 14")


if __name__ == '__main__':
    vp_start_gui()
